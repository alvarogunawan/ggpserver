/*
    Copyright (C) 2009 Martin GÃ¼nther <mintar@gmx.de> 

    This file is part of GGP Server.

    GGP Server is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    GGP Server is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with GGP Server.  If not, see <http://www.gnu.org/licenses/>.
*/

package tud.ggpserver.datamodel;

public class RemotePlayerInfo extends tud.gamecontroller.players.RemotePlayerInfo {
	public final static String STATUS_ACTIVE = "active";
	public final static String STATUS_INACTIVE = "inactive";
	public final static String STATUS_NEW = "new";

	private final User owner;
	private final String status;

//	/**
//	 * copy constructor; needed, because role index is unfortunately stored here. destroys the singleton pattern.
//	 */
//	public RemotePlayerInfo(RemotePlayerInfo old) {
//		this(old.getRoleindex(), old.getName(), old.getHost(), old.getPort(), old.getOwner());
//	}
	
	/**
	 * Use DBConnectorFactory.getDBConnector().getRemotePlayerInfo() instead
	 */
	protected RemotePlayerInfo(int roleindex, String name, String host, int port, User owner, String status) {
		super(roleindex, name, host, port);
		this.owner = owner;
		this.status = status;
	}

	/**
	 * Use AbstractDBConnector.getRemotePlayerInfo() instead
	 */
	protected RemotePlayerInfo(String name, String host, int port, User owner, String status) {
		super(-1, name, host, port);
		this.owner = owner;
		this.status = status;
	}

	public User getOwner() {
		return owner;
	}


	public String getStatus() {
		return status;
	}

	public static boolean legalStatus(String status) {
		if (status.equals(RemotePlayerInfo.STATUS_NEW)) {
			return true;
		} else if (status.equals(RemotePlayerInfo.STATUS_ACTIVE)) {
			return true;
		} else if (status.equals(RemotePlayerInfo.STATUS_INACTIVE)) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * @generated by CodeSugar http://sourceforge.net/projects/codesugar */
	
	@Override
	public String toString() {
		StringBuffer buffer = new StringBuffer();
		buffer.append("[RemotePlayerInfo:");
		buffer.append(" host: ");
		buffer.append(getHost());
		buffer.append(" port: ");
		buffer.append(getPort());
		buffer.append(" roleindex: ");
		buffer.append(getRoleindex());
		buffer.append(" name: ");
		buffer.append(getName());
		buffer.append(" owner: ");
		buffer.append(owner);
		buffer.append(" status: ");
		buffer.append(status);
		buffer.append("]");
		return buffer.toString();
	}	
}
